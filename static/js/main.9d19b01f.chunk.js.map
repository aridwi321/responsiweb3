{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","_this2","fetch","then","res","json","parsedJSON","list","map","data","dt_txt","concat","temp","main","temp_min","temp_max","weather","setState","isLoaded","catch","error","console","log","react_default","a","createElement","className","scope","length","item","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9d19b01f.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=Yogyakarta,id&mode=json&appid=b9a77834e03778ca5fda76e20e05d862&units=metric\")\n    .then(res => res.json())\n    .then(parsedJSON => parsedJSON.list.map(data => (\n      {\n        dt_txt: `${data.dt_txt}`,\n        temp: `${data.main.temp}`,\n        temp_min: `${data.main.temp_min}`,\n        temp_max: `${data.main.temp_max}`,\n        weather: `${data.weather[0].main}`,\n        \n\n        // id: `${data.id.name}`,\n        // firstName: `${data.name.first}`,\n        // lastName: `${data.name.last}`,\n        // location: `${data.location.state}, ${data.nat}`,\n        // thumbnail: `${data.picture.large}`,\n      }\n    )))\n    .then(items => this.setState({\n      items,\n      isLoaded: false\n    }))\n    .catch(error => console.log('parsing failed', error))\n  }\n\n  render() {\n    const {items} = this.state;\n    return (\n      <div>\n        <h1 className=\"text-center\">Prakiraan Cuaca Yogyakarta</h1>\n        <table className=\"table table table-dark\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Datetime</th>\n              <th scope=\"col\">Temp</th> \n              <th scope=\"col\">Temp Min</th>\n              <th scope=\"col\">Temp Max</th>\n              <th scope=\"col\">Weather</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              items.length > 0 ? items.map(item => {\n                const {dt_txt,temp,temp_min,temp_max,weather} = item;\n                return (\n                  <tr key={dt_txt}>\n                    <th scope=\"row\">\n                      {dt_txt}\n                    </th>\n                    <td>\n                      {temp}\n                    </td>\n                    <td>\n                      {temp_min}\n                    </td>\n                    <td>\n                      {temp_max}\n                    </td>\n                    <td>\n                      {weather}\n                    </td>\n                  </tr>  \n                );\n              }) : null\n            }\n          </tbody>  \n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}